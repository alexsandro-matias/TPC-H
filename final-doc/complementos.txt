
2.4.1	INNODB_BUFFER_POOL_SIZE

A prática mais comumente seguida é definir esse valor em 70% - 80% da RAM do sistema. Embora funcione bem na maioria dos casos, esse método pode não ser ideal em todas as configurações. Vejamos o exemplo de um sistema com 192 GB de RAM. Com base no método acima, chegamos a cerca de 150 GB para o tamanho do buffer pool. No entanto, este não é realmente um número ideal, pois não aproveita totalmente o grande tamanho de RAM que está disponível no sistema e deixa para trás cerca de 40 GB de memória. Essa diferença pode ser ainda mais significativa à medida que mudamos para sistemas com configurações maiores, onde deveríamos estar utilizando a RAM disponível em maior extensão.
    Comece com RAM total disponível. 
    Subtraia a quantidade adequada para as necessidades do sistema operacional.
    Subtraia a quantidade adequada para todas as necessidades do MySQL (como vários buffers do MySQL, tabelas temporárias, pools de conexão e buffers relacionados à replicação).
    Divida o resultado por 105%, que é uma aproximação da sobrecarga necessária para gerenciar o próprio buffer pool.

Por exemplo, vamos olhar para um sistema com 192 GB de RAM usando apenas InnoDB e tendo um tamanho total de arquivo de log de cerca de 4 GB. Podemos usar uma regra como "máximo de 2 GB ou 5% do total de RAM" para a alocação das necessidades do sistema operacional, conforme recomendado no livro acima, que chega a cerca de 9,6 GB. Então, também vamos alocar cerca de 4 GB para outras necessidades do MySQL, principalmente levando em consideração o tamanho do arquivo de log. Este método resulta em cerca de 170 GB para o tamanho do pool de buffer InnoDB, que é cerca de 88,5% de utilização do tamanho de RAM disponível.
Embora tenhamos usado a regra 'máximo de 2 GB ou 5% de RAM total' para calcular nossa alocação de memória para as necessidades do SO acima, a mesma regra não funciona muito bem em todos os casos, especificamente para sistemas com RAMs de tamanho médio entre 2 GB e 32 GB . Por exemplo, em um sistema com 3 GB de RAM, alocar 2 GB para as necessidades do sistema operacional não deixa muito para o buffer pool do InnoDB, ao passo que alocar 5% da RAM é muito pouco para as necessidades do nosso sistema operacional.

Portanto, vamos ajustar a regra de alocação de SO acima e examinar o método de computação InnoDB em várias configurações de RAM:
Para sistemas com RAM de tamanho pequeno (<= 1 GB)

Para sistemas rodando com menos de 1 GB de RAM, é melhor ir com o valor de configuração padrão do MySQL de 128 MB para o tamanho do buffer pool do InnoDB.
Para sistemas com RAM de tamanho médio (1 GB - 32 GB)

Considerando o caso de sistemas com um tamanho de RAM de 1 GB - 32 GB, podemos calcular as necessidades do sistema operacional usando esta heurística aproximada:

256 MB + 256 * log2 (tamanho da RAM em GB)

A racionalização aqui é que, para configurações de RAM baixa, começamos com um valor base de 256 MB para as necessidades do SO e aumentamos essa alocação em uma escala logarítmica conforme a quantidade de RAM aumenta. Dessa forma, podemos criar uma fórmula determinística para alocar RAM para nossas necessidades de sistema operacional. Também alocaremos a mesma quantidade de memória para nossas outras necessidades do MySQL. Por exemplo, em um sistema com 3 GB de RAM, faríamos uma alocação justa de 660 MB para as necessidades do sistema operacional e outros 660 MB para outras necessidades do MySQL, resultando em um valor de cerca de 1,6 GB para o tamanho do nosso buffer pool InnoDB.
Para sistemas com RAM de maior tamanho (> 32 GB)

Para sistemas com tamanhos de RAM maiores que 32 GB, voltaríamos a calcular as necessidades do sistema operacional como 5% do tamanho da RAM do nosso sistema e a mesma quantidade para outras necessidades do MySQL. Portanto, para um sistema com um tamanho de RAM de 192 GB, nosso método pousará em cerca de 165 GB para o tamanho do buffer pool do InnoDB, que é, novamente, um valor ideal a ser usado.
O tamanho em bytes do buffer pool, a área de memória onde o InnoDB armazena em cache a tabela e o índice dados. O valor padrão é 134217728 bytes (128 MB). O valor máximo depende da CPU arquitetura; o máximo é 4294967295 (232-1) em sistemas de 32 bits e 18446744073709551615 (264-1) em sistemas de 64 bits. Em sistemas de 32 bits, a arquitetura da CPU e o sistema operacional podem impor um tamanho máximo prático inferior ao máximo declarado. Quando o tamanho do buffer pool é maior que 1 GB, definindo innodb_buffer_pool_instances para um valor maior que 1 pode melhorar a escalabilidade em um servidor ocupado (MYSQL, 2020).
Um buffer pool maior requer menos E / S de disco para acessar os mesmos dados da tabela mais de uma vez. Com um servidor de banco de dados dedicado, você pode definir o tamanho do buffer pool para 80% do tamanho físico da máquina Tamanho da memória. Esteja ciente dos seguintes problemas potenciais ao configurar o tamanho do buffer pool e seja preparado para reduzir o tamanho do buffer pool, se necessário.
•	A competição pela memória física pode causar paginação no sistema operacional;
•	InnoDB reserva memória adicional para buffers e estruturas de controle, de modo que o total alocado o espaço é aproximadamente 10% maior que o tamanho do buffer pool especificado;
•	O espaço de endereço do buffer pool deve ser contíguo, o que pode ser um problema no Windows sistemas com DLLs que carregam em endereços específicos;
•	O tempo para inicializar o buffer pool é aproximadamente proporcional ao seu tamanho. Em instâncias com grandes valores de pools de buffer, o tempo de inicialização pode ser significativo. Para reduzir o período de inicialização, você pode salvar o estado do buffer pool no desligamento do servidor e restaure-o na inicialização do servidor. Consulte a Seção 15.8.3.6, “Salvando e restaurando o estado do buffer pool”.
Ao aumentar ou diminuir o tamanho do buffer pool, a operação é executada em blocos. O tamanho do pedaço é definido pela variável innodb_buffer_pool_chunk_size, que possui um padrão de 128 MB. O tamanho do buffer pool deve ser sempre igual ou múltiplo de innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances. Se você alterar o tamanho do buffer pool para um valor que não seja igual para ou um múltiplo de innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances, o tamanho do buffer pool é ajustado automaticamente para um valor igual ou múltiplo de innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances.
innodb_buffer_pool_size pode ser definido dinamicamente, o que permite redimensionar o buffer pool sem reiniciar o servidor. Os relatórios de variável de status Innodb_buffer_pool_resize_status o status das operações de redimensionamento do buffer pool online. Veja a Seção 15.8.3.1, “Configurando o Buffer InnoDB Tamanho da piscina ”para mais informações.
Se innodb_dedicated_server estiver habilitado, o valor innodb_buffer_pool_size é configurada automaticamente se não for definida explicitamente. Para obter mais informações, consulte a Seção 15.8.12, “Habilitando a configuração automática para um servidor MySQL dedicado”.





2.4.2	INNODB_BUFFER_POOL_INSTANCES

Cada buffer pool gerencia suas próprias listas gratuitas, listas de liberação, LRUs e todos os outros dados estruturas conectadas a um pool de buffer e são protegidas por seu próprio mutex de pool de buffer 

Esta opção só tem efeito ao definir innodb_buffer_pool_size para 1 GB ou mais. O total O tamanho do buffer pool é dividido entre todos os buffer pools. Para melhor eficiência, especifique uma combinação de innodb_buffer_pool_instances e innodb_buffer_pool_size para que cada buffer pool instância é de pelo menos 1 GB.
O valor padrão em sistemas Windows de 32 bits depende do valor de innodb_buffer_pool_size, conforme descrito abaixo:
• Se innodb_buffer_pool_size for maior que 1,3 GB, o padrão para innodb_buffer_pool_instances é innodb_buffer_pool_size / 128 MB, com solicitações de alocação de memória para cada bloco. 1,3 GB foi escolhido como o limite no qual há risco significativo para o Windows de 32 bits ser incapaz de alocar o espaço de endereço contíguo necessário para um único buffer pool.
• Caso contrário, o padrão é 1.
Em todas as outras plataformas, o valor padrão é 8 quando innodb_buffer_pool_size é maior que ou igual a 1 GB. Caso contrário, o padrão é 1. Para obter informações relacionadas, consulte a Seção 15.8.3.1, “Configurando o tamanho do pool de buffers do InnoDB”.









2.4.3	INNODB_BUFFER_POOL_CHUNK_SIZE
• Se innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances é maior do que o tamanho do buffer pool atual quando o buffer pool é inicializado, innodb_buffer_pool_chunk_size é truncado para innodb_buffer_pool_size/ innodb_buffer_pool_instances.
• O tamanho do buffer pool deve ser sempre igual ou múltiplo de innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances. Se você alterar innodb_buffer_pool_chunk_size, innodb_buffer_pool_size é automaticamente arredondado para um valor igual ou múltiplo de innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances. O ajuste ocorre quando o buffer pool é inicializado. Importante Deve-se ter cuidado ao alterar innodb_buffer_pool_chunk_size, pois a alteração desse valor pode aumentar automaticamente o tamanho do buffer pool.
Antes de alterar innodb_buffer_pool_chunk_size, calcule seu efeito em innodb_buffer_pool_size para garantir que o tamanho do buffer pool resultante é aceitável.
Para evitar possíveis problemas de desempenho, o número de pedaços (innodb_buffer_pool_size / innodb_buffer_pool_chunk_size) não deve exceder 1000.
A variável innodb_buffer_pool_size é dinâmica, o que permite redimensionar o buffer pool enquanto o servidor está online. No entanto, o tamanho do buffer pool deve ser igual ou múltiplo de innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances, e mudando dessas configurações de variáveis requer reiniciar o servidor.





2.4.4	THREAD_CACHE_SIZE
Ao examinar a diferença entre as conexões e Variáveis de status Threads_created, você pode ver o quão eficiente é o cache de threads. Para detalhes, veja Seção 5.1.10, “Variáveis de status do servidor”.
O valor padrão é baseado na seguinte fórmula, limitada a um limite de 100: 
8 + (max_connections / 100)



2.4.5	KEY_BUFFER_SIZE
1.1.1	KEY_BUFFER_SIZE
Blocos de índice para tabelas MyISAM são armazenados em buffer e compartilhados por todas as threads. key_buffer_size é o tamanho do buffer usado para blocos de índice. O buffer de chave também é conhecido como cache de chave.
A configuração máxima permitida para key_buffer_size é 4 GB - 1 em plataformas de 32 bits. Maior os valores são permitidos para plataformas de 64 bits. O tamanho máximo efetivo pode ser menor, dependendo em sua RAM física disponível e limites de RAM por processo impostos pelo seu sistema operacional ou plataforma de hardware. O valor desta variável indica a quantidade de memória solicitada. Internamente, o servidor aloca o máximo de memória possível até essa quantidade, mas a alocação real pode ser menos.
Você pode aumentar o valor para obter melhor tratamento do índice para todas as leituras e várias gravações; em um sistema cuja função principal é executar o MySQL usando o mecanismo de armazenamento MyISAM, 25% da máquina memória total é um valor aceitável para esta variável. No entanto, você deve estar ciente de que, se você tornar o valor muito grande (por exemplo, mais de 50% da memória total da máquina), seu sistema pode começar a paginar e se tornar extremamente lento. Isso ocorre porque o MySQL depende da operação sistema para executar o cache do sistema de arquivos para leituras de dados, então você deve deixar algum  spaço para o arquivo cache do sistema. Você também deve considerar os requisitos de memória de quaisquer outros mecanismos de armazenamento que você pode usar além do MyISAM.
Para obter ainda mais velocidade ao escrever muitas linhas ao mesmo tempo, use LOCK TABLES. Vejo Seção 8.2.5.1, “Otimizando instruções INSERT”. Você pode verificar o desempenho do buffer de chave emitindo uma instrução SHOW STATUS e examinando Key_read_requests, Key_reads, Key_write_requests e Variáveis de status de key_writes. (Consulte a Seção 13.7.7, “Demonstrações SHOW”.) Key_reads / A proporção key_read_requests normalmente deve ser menor que 0,01. The Key_writes / A proporção de key_write_requests é geralmente próxima de 1 se você estiver usando principalmente atualizações e exclusões, mas pode ser muito menor se você tende a fazer atualizações que afetam muitas linhas ao mesmo tempo ou se você estiver usando a opção de tabela DELAY_KEY_WRITE.
A fração do buffer de chave em uso pode ser determinada usando key_buffer_size em conjunto com a variável de status Key_blocks_unused e o tamanho do bloco de buffer, que está disponível no  variável de sistema key_cache_block_size:
1 - ((Key_blocks_unused * key_cache_block_size) / key_buffer_size)
Este valor é uma aproximação porque algum espaço no buffer de chave é alocado internamente para estruturas administrativas. Fatores que influenciam a quantidade de sobrecarga para essas estruturas inclui o tamanho do bloco e o tamanho do ponteiro. Conforme o tamanho do bloco aumenta, a porcentagem do buffer de chave perdida para a sobrecarga tende a diminuir. Blocos maiores resultam em um número menor de operações de leitura (porque mais chaves são obtidas por leitura), mas, inversamente, um aumento nas leituras de chaves que não são examinadas (se nem todas as chaves em um bloco forem relevantes para uma consulta).
É possível criar vários caches de chaves MyISAM. O limite de tamanho de 4 GB se aplica a cada cache individualmente, não como um grupo. Consulte a Seção 8.10.2, “Cache de chave MyISAM”.


1.1.1 THREAD_CACHE_SIZE
Quando um cliente se desconecta, o cliente encadeamentos são colocados no cache se houver menos de encadeamentos thread_cache_size lá. solicitações de para encadeamentos são satisfeitos reutilizando encadeamentos retirados do cache, se possível, e somente quando o cache está vazio é um novo thread criado. 


