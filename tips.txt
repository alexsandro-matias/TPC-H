--PARTE DAS OTIMIZAÇÕES
--LINK - HTTPS://WWW.YOUTUBE.COM/WATCH?V=RTIQPOKWZ_O&INDEX=3&LIST=PLNNEM4DEC9TMYYSSSY2JPHWKAIYKDR5TC

--O QUE são ÍNDICES??
--NÃOCONTEXTÃO DA ESTRUTURA DE DADOS:
--TRATA SE DE UMA REFERÊNCIAASSOCIADA
--A UMA CHAVE.ÉUTILIZADA PARA FINS DE OTIMIZAÇÃO DE CONSULTAS, POIS PERMITE
--A LOCALIZAÇÃO MAIS RAPIDA DE UM REGISTRO.
--NÃOCONTEXTÃO DE BANCO DE DADOS:
--TRATA SE DE UMA ESTRUTURA (OU ARQUIVO)
--AUXILIAR ASSOCIADO A UMA TABELA (OU COLEÇÃO DE DADOS). POSSUI A FUNÇÃO DE
--ACELERAR O TEMPO DE ACESSO AS LINHAS DE UMA TABELA.
--
--
--TIPOS DE ÍNDICES
--EXISTEM QUATRO TIPOS BÁSICO DE ÍNDICES:
- COMPOSTÃOS MAIS DE UMA COLUNA DA TABELA SENDO UTILIZADA;
- SIMPLES APENAS UMA COLUNA DA TABELA SENDO UTILIZADA;
- INTERNOS DENTRO DA ESTRUTURA DE DADOS DA TABELA;
- EXTERNOS FAZ REFERÊNCIAFORA DA TABELA
--
--
--A UTILIZAÇÃO DE ÍNDICESÉINDICADA PARA QUE HAJA UM MENOR CONSUMO E
--RETÃORNÃOMAIS RÁPIDO DO SERVIDOR PARA A APLICAÇÃO EM QUESTÃO. RESUMINDO,
--ELES SERVEM PARA PROPORCIONAR:
- AGILIDADE E PERFORMANCE EM BUSCAS;
- MENOR CONSUMO DE RECURSOS (INPUT E OUTPUT DE DISCO), POIS CONSOME
--MENOS RECURSO DO SERVIDOR, PROCESSAMENTÃO E MEMÓRIA, ALÉMDE TRAZER
--RETÃORNÃOPARA A APLICAÇÃO DE FORMA MAIS RÁPIDA.
--INPUT
--E OUTPUT (LEITURA E GRAVAÇÃO EM DISCO PARA CADA BUSCA REALIZADA
--NÃOSERVIDOR DE BANCO DE DADOS, CASO AQUELE DADO ESTEJA EM MEMÓRIA
--(CACHE),É NECESSÁRIO REALIZAR UMA BUSCA DIRETAMENTE NÃODISCO. ESSAS
--BUSCAS TEM UM ALTÃO NÍVELDE PROCESSAMENTÃO.
--
--OS ÍNDICES DEVEM SER UTILIZADOS SEMPRE QUE HOUVER UM
--GRANDE NÚMERODE PESQUISAS SOBRE DETERMINADO ITEM, AFIM
--DE OTIMIZAR AS BUSCAS E MELHORAR A PERFORMANCE.

        
--AGORA VAMOS APRENDER A CRIAR UM ÍNDICE SIMPLES. PARA ISSO, CRIAMOS UMA
--TABELA (PRODUTOS), ADICIONANDO UM ÍNDICE PARA O CAMPO NOME, ATRAVÉSDO
--COMANDO  - INDEX IDX_NOME (NOME);

        
--CREATE TABLE PRODUTÃOS(
--CODIGO INT,
--NOME VARCHAR(50),
--KEY CODIGO CODIGO
--INDEX IDX_NOME (NOME)
--);
--O ÍNDICE ( IDX_NOME ) REFERENCIA O CAMPO NOME, UTILIZANDO O CAMPO COMPLETÃO COMO ÍNDICE. PARA
--VISUALIZAR OS ÍNDICES DE UMA TABELA, VOCÊ PODE UTILIZAR O COMANDO SHOW INDEXES" A PARTIR
--DA TABELA RECÉM CRIADA, VAMOS PARA O PROMPT E ESCREVEMOS O COMANDO:
--
--SHOW INDEXES FROM PRODUTÃOS;

--
--ADICIONANDO ÍNDICES A
--TABELAS EXISTENTES
--�
--IMPORTANTE QUE O BANCO DE DADOS SEJA PLANEJADO PARA A OTIMIZAÇÃO
--DE CERTAS BUSCAS. CASO CONTRÁRIO, NÃOMOMENTÃO EM QUE AS APLICAÇÕES
--NECESSITAREM CONSUMIR MAIS DADOS DO BANCO, PODEREMOS TER
--PROBLEMAS NA PERFORMANCE . EM UMA SITUAÇÃO COMUM, NÃO TERÍAMOS
--ÍNDICES NA ESTRUTURA INICIAL DA TABELA. POR ISSO, VAMOS CRIAR NOVAMENTE
--A TABELA (PRODUTOS) SEM ADICIONAR ÍNDICES.
--
--CREATE TABLE PRODUTÃOS (
--CODIGO INT,
--NOME VARCHAR(50),
--KEY CODIGO (CODIGO)
--);

-        
--QUANDO PERCEBEMOS QUE A APLICAÇÃO ESTÁPERDENDO PERFORMANCE, POIS sãoFEITAS MUITAS
--REQUISIÇÕES DE BUSCA PELO NOME DOS PRODUTÃOS, PODEMOS RESOLVER O PROBLEMA ATRAVÉSDE
--UM ÍNDICE PARA O CAMPO NOME. PARA ADICIONAR UM ÍNDICE EM UMA TABELA JÁCRIADA, VAMOS
--UTILIZAR O SEGUINTE COMANDO:
--
--CREATE INDEX IDX_NOME ON PRODUTÃOS(NOME);

        
        
--PARTICIONAMENTÃO DE TABELA;
--OS ÍNDICES AUXILIAM EM CONSULTAS E
--SUBCONSULTAS , PORÉMQUANDO A TABELA POSSUI UM
--GRANDE VOLUME DE DADOS, O DESEMPENHO DO BANCO DE DADOS CONTINUA PREJUDICADO.
--PARA RESOLVER ESTE PROBLEMA, O
--PARTICIONAMENTÃO DE TABELAS, OU SEJA, A DIVIsãoDE UMA
--TABELA INTEIRA EM SUB TABELAS MENORES, TÃORNA SE A SOLUÇÃO IDEAL. A GROSSO MODO,
--ESTAMOS QUEBRANDO TABELAS EM SUB TABELAS, OU SEJA, PARTICIONANDO.

-        PARTICIONAMENTÃO
--DADOS E ÍNDICES sãoARMAZENADOS EM
--MÚLTIPLOS ARQUIVOS, 1 POR PARTIÇÃO.
--NÚMERO MÁXIMODE PARTIÇÕES: 1024
--(ISTÃOÉDEFINIÇÃO DO MYSQL).

-        
--QUAIS AS VANTAGENS? 
--A APLICAÇÃO PERMANECE IGUAL!
--NA APLICAÇÃO, NADA MUDA. A TABELA CONTINUAR  SENDO VISTA COMO UMA TABELA  ÚNICA.
--MAIS DADOS EM UMA  ÚNICA TABELA
--DEPENDENDO
--DO SISTEMA DE ARQUIVOS UTILIZADO PELO SERVIDOR MYSQL, HÁ UM LIMITE
--MÁXIMODE TAMANHO DE ARQUIVO, O QUE LIMITA A QUANTIDADE DE DADOS QUE PODEM SER
--INSERIDOS EM UMA TABELA. UTILIZANDO O PARTICIONAMENTÃO , PARTIMOS A TABELA EM MÚLTIPLOS
--ARQUIVOS, AUMENTANDO ASSIM O LIMITE MÁXIMODE DADOS QUE PODEM SER INSERIDOS NESSA
--TABELA. EM SISTEMAS DE ARQUIVO MODERNOS, ESSE LIMITEÉMUITÃO ALTÃO, MAS AINDA ASSIM,
--UMA VANTAGEM.

REMOÇÃO DE DADOS ABSOLETÃOS DEPENDENDO DO PARTICIONAMENTÃO UTILIZADO, A REMOÇÃO DE DADOS OBSOLETÃOSÉFACILITADA.
ESTA VANTAGEMÉMAIS FÁCIL DE EXPLICAR UTILIZANDO O EXEMPLO ABAIXO.
PENSE EM UMA ESCOLA, ONDE TÃODAS AS MATRÍCULASENCONTRAM SE EM UMA ÚNICA TABELA.
NESTE CASO, PODERÍAMOS PARTICIONAR ESTA TABELA ÚNICA PELO ANÃODE MATRICULA, GERANDO
DIVERSAS OUTRAS SUB TABELAS . PORTANTÃO, CASO NÃOHOUVESSE MAIS O INTERESSE POR UM
DETERMINADO ANÃODE MATRÍCULA, A REMOÇÃO PODERIA SER APLICADA ESPECIFICAMENTE
NAQUELE ANÃODE INTERESSE. DESTA FORMA, REMOVENDO OS DADOS ABSOLETÃOS

--
--DESEMPENHO DE BUSCAS OTIMIZADO
--O DESEMPENHO DE BUSCASÉOTIMIZADO, POIS DIMINUI O UNIVERSO NÃOQUAL ELAS REALIZADAS.
--ANTES A BUSCA ERA REALIZADA BASEANDO SE EM UM UNIVERSO ENORME DE DADOS DE UMA
--TABELA, AGORA A BUSCA BASEIA SE EM APENAS UMA FRAÇÃO DESTE UNIVERSO, BEM MENOR E SUBDIVIDIDO.        
-        

